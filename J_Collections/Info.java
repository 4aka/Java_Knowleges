package J_Collections;

public class Info {
	
}

/*
   Типы коллекций:

    Collection: базовый интерфейс для всех коллекций и других интерфейсов коллекций

    Queue: наследует интерфейс Collection и представляет функционал для структур данных в виде очереди

    Deque: наследует интерфейс Queue и представляет функционал для двунаправленных очередей

    List: наследует интерфейс Collection и представляет функциональность простых списков

    Set: также расширяет интерфейс Collection и используется для хранения множеств уникальных объектов

    SortedSet: расширяет интерфейс Set для создания сортированных коллекций

    NavigableSet: расширяет интерфейс SortedSet для создания коллекций, в которых можно осуществлять поиск по соответствию

    Map: предназначен для созданий структур данных в виде словаря, где каждый элемент имеет определенный ключ и значение. В отличие от других интерфейсов коллекций не наследуется от интерфейса Collection

 */


/*
    Эти интерфейсы частично реализуются абстрактными классами:

    AbstractCollection: базовый абстрактный класс для других коллекций, который применяет интерфейс Collection

    AbstractList: расширяет класс AbstractCollection и применяет интерфейс List, предназначен для создания коллекций в виде списков

    AbstractSet: расширяет класс AbstractCollection и применяет интерфейс Set для создания коллекций в виде множеств

    AbstractQueue: расширяет класс AbstractCollection и применяет интерфейс Queue, предназначен для создания коллекций в виде очередей и стеков

    AbstractSequentialList: также расширяет класс AbstractList и реализует интерфейс List. Используется для создания связанных списков

    AbstractMap: применяет интерфейс Map, предназначен для создания наборов по типу словаря с объектами в виде пары "ключ-значение"

 */


/*
    Методы коллекций:

    boolean add (E item): добавляет в коллекцию объект item. При удачном добавлении возвращает true,

    boolean addAll (Collection<? extends E> col): добавляет в коллекцию все элементы из коллекции col. При удачном добавлении возвращает true,

    void clear (): удаляет все элементы из коллекции

    boolean contains (Object item): возвращает true, если объект item содержится в коллекции

    boolean isEmpty (): возвращает true, если коллекция пуста,

    Iterator<E> iterator (): возвращает объект Iterator для обхода элементов коллекции

    boolean remove (Object item): возвращает true, если объект item удачно удален из коллекции,

    boolean removeAll (Collection<?> col): удаляет все объекты коллекции col из текущей коллекции. Если текущая коллекция изменилась, возвращает true,

    boolean retainAll (Collection<?> col): удаляет все объекты из текущей коллекции, кроме тех, которые содержатся в коллекции col. Если текущая коллекция после удаления изменилась, возвращает true,

    int size (): возвращает число элементов в коллекции

    Object[] toArray (): возвращает массив, содержащий все элементы коллекции

 */
